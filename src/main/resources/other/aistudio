package uz.pdp.online_education.telegram.service.student;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import uz.pdp.online_education.telegram.config.controller.OnlineEducationBot;
import uz.pdp.online_education.telegram.mapper.SendMsg;
import uz.pdp.online_education.telegram.service.student.template.StudentCallBackQueryService;
import uz.pdp.online_education.telegram.service.student.template.StudentProcessMessageService;
import uz.pdp.online_education.telegram.service.student.template.StudentReplyKeyboardService;

/**
 * Handles all callback queries originating from the student panel's inline keyboards.
 * This class acts as a central router, delegating actions based on the parsed callback data.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class StudentCallBackQueryServiceImpl implements StudentCallBackQueryService {

    private final StudentMessageService studentMessageService;
    private final OnlineEducationBot bot;
    private final SendMsg sendMsg;
    private final StudentReplyKeyboardService studentReplyKeyboardService;

    /**
     * {@inheritDoc}
     */
    @Override
    public void handleCallback(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        String queryData = callbackQuery.getData();
        String callbackQueryId = callbackQuery.getId();

        // Immediately answer the callback query to stop the loading animation on the user's screen.
        bot.myExecute(new AnswerCallbackQuery(callbackQueryId));

        try {
            String[] dataParts = queryData.split(":");
            if (dataParts.length < 2) {
                log.warn("Received invalid callback data format: {}", queryData);
                return;
            }

            String module = dataParts[0];
            String action = dataParts[1];

            switch (module) {
                case "mycourse" -> handleMyCourseCallbacks(action, dataParts, chatId, messageId);
                case "mymodule" -> handleMyModuleCallbacks(action, dataParts, chatId, messageId);
                case "mylesson" -> handleMyLessonCallbacks(action, dataParts, chatId, messageId);
                case "content" -> handleContentCallbacks(action, dataParts, chatId);
                case "lesson" -> handleLessonCallbacks(action, dataParts, callbackQueryId);
                case "student" -> {
                    if ("main_menu".equals(action))
                        handleBackToMainMenu(chatId, messageId, callbackQuery.getFrom().getUserName());
                }
                default -> log.warn("Unhandled callback module prefix: {}", module);
            }
        } catch (Exception e) {
            log.error("Error processing callback query: " + queryData, e);
            // Optionally, send a user-facing error message.
        }
    }

    private void handleMyCourseCallbacks(String action, String[] dataParts, Long chatId, Integer messageId) {
        if ("list".equals(action) && dataParts.length > 3) {
            int page = Integer.parseInt(dataParts[3]);
            studentMessageService.editMyCoursesPage(chatId, messageId, page);
        } else if ("view".equals(action) && dataParts.length > 2) {
            Long courseId = Long.parseLong(dataParts[2]);
            studentMessageService.sendCourseModulesPage(chatId, messageId, courseId);
        }
    }

    private void handleMyModuleCallbacks(String action, String[] dataParts, Long chatId, Integer messageId) {
        if ("view".equals(action) && dataParts.length > 2) {
            Long moduleId = Long.parseLong(dataParts[2]);
            studentMessageService.sendLessonListPage(chatId, messageId, moduleId);
        }
        // TODO: Handle "module:buy:{moduleId}" callback
    }

    private void handleMyLessonCallbacks(String action, String[] dataParts, Long chatId, Integer messageId) {
        if ("view".equals(action) && dataParts.length > 2) {
            Long lessonId = Long.parseLong(dataParts[2]);
            studentMessageService.sendLessonMainMenu(chatId, messageId, lessonId);
        }
    }

    private void handleContentCallbacks(String action, String[] dataParts, Long chatId) {
        if ("view".equals(action) && dataParts.length > 2) {
            Long contentId = Long.parseLong(dataParts[2]);
            studentMessageService.sendContent(chatId, contentId);
        }
    }

    private void handleLessonCallbacks(String action, String[] dataParts, String chatId) {
        if ("locked".equals(action)) {
            // Send a gentle notification to the user that the lesson is locked.
            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(chatId); // Requires passing the original callbackQueryId
            answer.setText("Bu darsni ko'rish uchun avval modulni sotib oling.");
            answer.setShowAlert(true); // Shows a pop-up alert
            bot.myExecute(answer);
        }
    }

    private void handleBackToMainMenu(Long chatId, Integer messageId, String username) {
        ReplyKeyboardMarkup replyKeyboardMarkup = studentReplyKeyboardService.studentMainMenu();
        bot.myExecute(sendMsg.deleteMessage(chatId, messageId));
        bot.myExecute(sendMsg.sendMessage(chatId, "Bosh menu",replyKeyboardMarkup));
        studentMessageService.sendWelcomeMessage(chatId, username);
    }
}
-----------------------
package uz.pdp.online_education.telegram.service.student;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import uz.pdp.online_education.model.Course;
import uz.pdp.online_education.model.Module;
import uz.pdp.online_education.model.ModuleEnrollment;
import uz.pdp.online_education.model.lesson.*;
import uz.pdp.online_education.telegram.Utils;
import uz.pdp.online_education.telegram.service.student.template.StudentInlineKeyboardService;

import java.util.ArrayList;
import java.util.List;


@Service
public class StudentInlineKeyboardServiceImpl implements StudentInlineKeyboardService {

    /**
     * {@inheritDoc}
     */
    @Override
    public InlineKeyboardMarkup dashboardMenu() {
        return createSingleButtonKeyboard(
                Utils.InlineButtons.LOGOUT_TEXT,
                Utils.CallbackData.AUTH_LOGOUT_INIT_CALLBACK
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InlineKeyboardMarkup logoutConfirmation() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

        // Create the "Yes" and "No" buttons
        InlineKeyboardButton yesButton = createButton(
                Utils.InlineButtons.LOGOUT_CONFIRM_YES_TEXT,
                Utils.CallbackData.AUTH_LOGOUT_CONFIRM_CALLBACK
        );

        InlineKeyboardButton noButton = createButton(
                Utils.InlineButtons.LOGOUT_CONFIRM_NO_TEXT,
                Utils.CallbackData.AUTH_LOGOUT_CANCEL_CALLBACK
        );

        // Place them side-by-side in a single row
        markup.setKeyboard(List.of(List.of(yesButton, noButton)));

        return markup;
    }

    /**
     * "Mening Kurslarim" uchun sahifalangan klaviaturani yaratadi.
     * Bu versiyada raqamli tugmalar har bir qatorda 5 tadan qilib joylashtiriladi.
     * Metod imzosi o'zgarishsiz qoladi.
     *
     * @param coursesPage Kurslarning sahifalangan ro'yxati.
     * @return To'g'ri formatlangan InlineKeyboardMarkup.
     */
    @Override
    public InlineKeyboardMarkup myCoursesListPage(Page<Course> coursesPage) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<Course> coursesOnPage = coursesPage.getContent();
        int currentPage = coursesPage.getNumber();
        int pageSize = coursesPage.getSize();

        // 1. Barcha raqamli tugmalarni bitta ro'yxatga yig'ib olamiz
        List<InlineKeyboardButton> allNumberButtons = new ArrayList<>();
        for (int i = 0; i < coursesOnPage.size(); i++) {
            int courseNumber = currentPage * pageSize + i + 1;
            Course course = coursesOnPage.get(i);
            allNumberButtons.add(createButton(
                    String.valueOf(courseNumber),
                    "mycourse:view:" + course.getId()
            ));
        }

        // 2. YANGI YORDAMCHI METOD yordamida tugmalarni qatorlarga bo'lamiz
        List<List<InlineKeyboardButton>> numberedButtonRows = arrangeButtonsInTwoRows(allNumberButtons);
        keyboard.addAll(numberedButtonRows);

        // 3. Sahifalash va "Orqaga" tugmalarini qo'shamiz
        addPaginationControls(keyboard, coursesPage.getTotalPages(), currentPage, "mycourse:list:page:");
        keyboard.add(List.of(createButton("⬅️ Bosh menyuga", "student:main_menu")));

        markup.setKeyboard(keyboard);
        return markup;
    }

    // --- YANGI, SODDALASHTIRILGAN VA TO'G'RI YORDAMCHI METOD ---

    /**
     * Arranges a list of buttons into a maximum of two rows.
     * - If 5 or fewer buttons, they are all in one row.
     * - If more than 5, they are split as evenly as possible into two rows.
     *
     * @param buttons The flat list of buttons to arrange.
     * @return A list of rows (List<List<InlineKeyboardButton>>).
     */
    private List<List<InlineKeyboardButton>> arrangeButtonsInTwoRows(List<InlineKeyboardButton> buttons) {
        List<List<InlineKeyboardButton>> resultRows = new ArrayList<>();
        if (buttons == null || buttons.isEmpty()) {
            return resultRows;
        }

        int totalButtons = buttons.size();

        // 1-Qoida: Agar tugmalar soni 5 yoki undan kam bo'lsa, hammasini bitta qatorga joylash
        if (totalButtons <= 5) {
            resultRows.add(buttons);
        } else {
            // 2-Qoida: 5 tadan ko'p bo'lsa, ikkita qatorga bo'lish

            // Birinchi qatordagi tugmalar sonini hisoblash
            // Math.ceil() - sonni yuqoriga qarab yaxlitlaydi. Masalan, 7 / 2.0 = 3.5 -> 4
            int firstRowSize = (int) Math.ceil(totalButtons / 2.0);

            // Birinchi qatorni yaratish
            List<InlineKeyboardButton> row1 = buttons.subList(0, firstRowSize);
            resultRows.add(row1);

            // Ikkinchi qatorni yaratish
            List<InlineKeyboardButton> row2 = buttons.subList(firstRowSize, totalButtons);
            resultRows.add(row2);
        }

        return resultRows;
    }
    private void addPaginationControls(List<List<InlineKeyboardButton>> keyboard, int totalPages, int currentPage, String pageCallbackPrefix) {
        if (totalPages > 1) {
            List<InlineKeyboardButton> navButtons = new ArrayList<>();
            if (currentPage > 0) {
                navButtons.add(createButton("⬅️ Oldingisi", pageCallbackPrefix + (currentPage - 1)));
            }
            navButtons.add(createButton((currentPage + 1) + "/" + totalPages, "noop"));
            if (currentPage < totalPages - 1) {
                navButtons.add(createButton("Keyingisi ➡️", pageCallbackPrefix + (currentPage + 1)));
            }
            keyboard.add(navButtons);
        }
    }


    @Override
    public InlineKeyboardMarkup courseModulesPage(Long courseId, List<ModuleEnrollment> enrollments) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // 1. Har bir modul uchun raqamli tugmalarni yaratish
        List<InlineKeyboardButton> numberButtons = new ArrayList<>();
        for (int i = 0; i < enrollments.size(); i++) {
            Module module = enrollments.get(i).getModule();
            int moduleNumber = i + 1;
            numberButtons.add(createButton(
                    String.valueOf(moduleNumber),
                    "mymodule:view:" + module.getId() // Modulni ko'rish uchun callback
            ));
        }
        if (!numberButtons.isEmpty()) {
            keyboard.add(numberButtons);
        }

        // 2. Orqaga qaytish tugmasi
        keyboard.add(List.of(createButton(
                "⬅️ Mening Kurslarimga qaytish",
                "mycourse:list:page:0" // "Mening Kurslarim"ning birinchi sahifasiga qaytish
        )));

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InlineKeyboardMarkup backToMyCourses() {
        return createSingleButtonKeyboard(
                Utils.InlineButtons.BACK_TO_MY_COURSES_TEXT,
                Utils.CallbackData.BACK_TO_MY_COURSES_CALLBACK
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InlineKeyboardMarkup lessonListPage(Module module, List<Lesson> lessons, boolean isEnrolled) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // 1. Agar foydalanuvchi a'zo bo'lmagan bo'lsa, "Sotib olish" tugmasini qo'shamiz.
        if (!isEnrolled && module.getPrice() > 0) {
            String buttonText = String.format("🚀 Modulni sotib olish (%d UZS)", module.getPrice());
            keyboard.add(List.of(createButton(
                    buttonText,
                    "module:buy:" + module.getId()
            )));
        }

        // 2. Darslar uchun raqamli navigatsiya tugmalarini yaratamiz.
        List<InlineKeyboardButton> numberButtons = new ArrayList<>();
        for (Lesson lesson : lessons) {
            boolean canAccess = isEnrolled || lesson.isFree();

            // Tugmaga emoji qo'shish orqali holatini bildiramiz.
            String buttonText = (canAccess ? "▶️ " : "🔒 ") + lesson.getOrderIndex();

            numberButtons.add(createButton(
                    buttonText,
                    canAccess ? "mylesson:view:" + lesson.getId() : "lesson:locked"
            ));
        }
        if (!numberButtons.isEmpty()) {
            keyboard.add(numberButtons);
        }

        // 3. "Orqaga" tugmasini to'g'ri manzil bilan yaratamiz.
        keyboard.add(List.of(createButton(
                "⬅️ Modullar ro'yxatiga qaytish",
                "mycourse:view:" + module.getCourse().getId() // Module'dan courseId'ni olamiz.
        )));

        markup.setKeyboard(keyboard);
        return markup;
    }

    @Override
    public InlineKeyboardMarkup lessonViewKeyboard(Long moduleId, String lessonUrlOnSite) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // Button to view the full lesson on the website
        InlineKeyboardButton viewOnSiteButton = createButton("🌐 Darsni to'liq ko'rish (Saytda)", null);
        viewOnSiteButton.setUrl(lessonUrlOnSite); // The URL is passed as a parameter
        keyboard.add(List.of(viewOnSiteButton));

        // Button to go back to the list of lessons for the module
        keyboard.add(List.of(createButton(
                "⬅️ Darslar ro'yxatiga qaytish",
                "mymodule:view:" + moduleId
        )));

        markup.setKeyboard(keyboard);
        return markup;
    }

    @Override
    @Transactional(readOnly = true) // Lesson'dan lazy bog'liqliklarni o'qish uchun
    public InlineKeyboardMarkup lessonContentMenu(Lesson lesson) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // Lesson'ga bog'langan barcha Content'larni aylanib chiqamiz
        for (Content content : lesson.getContents()) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            String buttonText = "❓ Noma'lum kontent";

            if (content instanceof AttachmentContent) {
                buttonText = "▶️ Asosiy Video Darslik";
            } else if (content instanceof TextContent) {
                buttonText = "📝 Darsning To'liq Matni";
            } else if (content instanceof QuizContent) {
                buttonText = "❓ Amaliy Mashg'ulot (Quiz)";
            }

            button.setText(buttonText);
            button.setCallbackData("content:view:" + content.getId());
            keyboard.add(List.of(button));
        }

        // "Orqaga" tugmasini qo'shish
        keyboard.add(List.of(createButton(
                "⬅️ Darslar ro'yxatiga qaytish",
                "mymodule:view:" + lesson.getModule().getId()
        )));

        markup.setKeyboard(keyboard);
        return markup;
    }

    // Quiz uchun alohida klaviatura
    @Override
    public InlineKeyboardMarkup quizButton(Long quizId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        InlineKeyboardButton button = new InlineKeyboardButton("✍️ Testni Boshlash (Saytda)");
        // TODO: Sayt manzilini application.yml'dan olish kerak
        button.setUrl("http://your-site.com/quiz/" + quizId);
        markup.setKeyboard(List.of(List.of(button)));
        return markup;
    }

    /**
     * @param module
     * @return
     */
    @Override
    public InlineKeyboardMarkup buyOnlyKeyboard(Module module) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        String buttonText = String.format("🚀 Modulni sotib olish (%d UZS)", module.getPrice());
        keyboard.add(List.of(createButton(
                buttonText,
                "module:buy:" + module.getId()
        )));

        keyboard.add(List.of(createButton(
                "⬅️ Modullar ro'yxatiga qaytish",
                "mycourse:view:" + module.getCourse().getId()
        )));

        markup.setKeyboard(keyboard);
        return markup;
    }

    // Add this new generic helper to your InlineKeyboardServiceImpl
    private InlineKeyboardMarkup createPaginationKeyboardWithNumbers(Page<?> page, List<InlineKeyboardButton> numberButtons, String pageCallbackPrefix, String backCallback) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // Row for numbered buttons
        if (!numberButtons.isEmpty()) {
            keyboard.add(numberButtons);
        }

        // Row for prev/next buttons
        List<InlineKeyboardButton> navButtons = new ArrayList<>();
        if (page.hasPrevious()) {
            navButtons.add(createButton("⬅️ Oldingisi", pageCallbackPrefix + (page.getNumber() - 1)));
        }
        navButtons.add(createButton((page.getNumber() + 1) + "/" + page.getTotalPages(), "noop"));
        if (page.hasNext()) {
            navButtons.add(createButton("Keyingisi ➡️", pageCallbackPrefix + (page.getNumber() + 1)));
        }
        if (!navButtons.isEmpty()) {
            keyboard.add(navButtons);
        }

        // Row for back button
        keyboard.add(List.of(createButton("⬅️ Bosh menyuga", backCallback)));

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * A private helper method to create a single {@link InlineKeyboardButton}.
     * This centralizes button creation.
     *
     * @param text         The text to be displayed on the button.
     * @param callbackData The data to be sent when the button is pressed.
     * @return A configured {@link InlineKeyboardButton} object.
     */
    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton(text);
        if (callbackData != null) {
            button.setCallbackData(callbackData);
        }
        return button;
    }

    /**
     * A private helper to create a keyboard with a single, centered button.
     * Useful for simple actions like "Back".
     *
     * @param text         The button's text.
     * @param callbackData The button's callback data.
     * @return An {@link InlineKeyboardMarkup} with one button.
     */
    private InlineKeyboardMarkup createSingleButtonKeyboard(String text, String callbackData) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        InlineKeyboardButton button = createButton(text, callbackData);
        markup.setKeyboard(List.of(List.of(button)));
        return markup;
    }
}
---------
package uz.pdp.online_education.telegram.service.student;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendVideo;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import uz.pdp.online_education.enums.TransactionStatus;
import uz.pdp.online_education.model.*;
import uz.pdp.online_education.model.Module;
import uz.pdp.online_education.model.lesson.*;
import uz.pdp.online_education.repository.*;
import uz.pdp.online_education.telegram.Utils;
import uz.pdp.online_education.telegram.config.controller.OnlineEducationBot;
import uz.pdp.online_education.telegram.enums.BotMessage;
import uz.pdp.online_education.telegram.enums.UserState;
import uz.pdp.online_education.telegram.mapper.SendMsg;
import uz.pdp.online_education.telegram.model.TelegramUser;
import uz.pdp.online_education.telegram.service.message.MessageService;
import uz.pdp.online_education.telegram.service.student.template.StudentInlineKeyboardService;
import uz.pdp.online_education.telegram.service.student.template.StudentProcessMessageService;
import uz.pdp.online_education.telegram.service.student.template.StudentReplyKeyboardService;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class StudentMessageServiceImpl implements StudentMessageService {

    // --- DEPENDENCIES ---
    private final SendMsg sendMsg;
    private final MessageService messageService;
    private final ModuleEnrollmentRepository moduleEnrollmentRepository;
    private final TelegramUserRepository telegramUserRepository;
    private final StudentInlineKeyboardService studentInlineKeyboardService;
    private final OnlineEducationBot onlineEducationBot;
    private final StudentReplyKeyboardService studentReplyKeyboardService;
    private final CourseRepository courseRepository;
    private final ModuleRepository moduleRepository;
    private final LessonRepository lessonRepository;
    private final ContentRepository contentRepository;
    private final PaymentRepository paymentRepository;

    // --- PUBLIC HANDLER METHOD ---
    @Override
    public void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();
        Integer messageId = message.getMessageId();

        TelegramUser telegramUser = getOrCreateTelegramUser(chatId);
        if (telegramUser.getUser() == null) {
            onlineEducationBot.myExecute(sendMsg.sendMessage(chatId, "Please authenticate first."));
            return;
        }

        User user = telegramUser.getUser();
        UserProfile profile = user.getProfile();

        // Router for text commands and ReplyKeyboard buttons
        switch (text) {
            case Utils.START -> startMessage(chatId, message.getFrom());
            case Utils.DASHBOARD -> dashboardMessage(user, profile, chatId, messageId);
            case Utils.ReplyButtons.STUDENT_MY_COURSES -> sendMyCoursesPage(chatId, 0);
            case Utils.ReplyButtons.STUDENT_ALL_COURSES -> sendAllCoursesPage(chatId, 0);
            case Utils.ReplyButtons.STUDENT_BALANCE -> sendBalanceMenu(chatId);
            case Utils.ReplyButtons.STUDENT_HELP -> askForSupportMessage(chatId);
        }
    }

    private void startMessage(Long chatId, org.telegram.telegrambots.meta.api.objects.User from) {
        telegramUserRepository.updateStateByChatId(chatId, UserState.STUDENT_MAIN_MENU);
        ReplyKeyboardMarkup replyKeyboardMarkup = studentReplyKeyboardService.studentMainMenu();
        SendMessage sendMessage = sendMsg.sendMessage(
                chatId,
                messageService.getMessage(BotMessage.START_MESSAGE_STUDENT, from.getUserName()),
                replyKeyboardMarkup);
        onlineEducationBot.myExecute(sendMessage);
    }

    private void dashboardMessage(User user, UserProfile profile, Long chatId, Integer messageId) {
        // Dashboard is a one-time view, so no state change is needed.
        String dashboardText = prepareStudentDashboardText(user, profile);
        InlineKeyboardMarkup inlineKeyboardMarkup = studentInlineKeyboardService.dashboardMenu();
        SendMessage sendMessage = sendMsg.sendMessage(chatId, dashboardText, inlineKeyboardMarkup);
        onlineEducationBot.myExecute(sendMessage);
        onlineEducationBot.myExecute(sendMsg.editMarkup(chatId, messageId));
    }

    private void sendMyCoursesPage(Long chatId, int pageNumber) {
        telegramUserRepository.updateStateByChatId(chatId, UserState.STUDENT_VIEWING_MY_COURSES);


        Message message = onlineEducationBot.MyExecute(sendMsg.sendMessage(chatId, "Siz tanlagan kurslar", new ReplyKeyboardRemove(true)));
        onlineEducationBot.myExecute(sendMsg.deleteMessage(chatId, message.getMessageId()));

        // This method can use the "send and edit" pattern for better UX.
        // For now, keeping the original logic as requested.
        User user = telegramUserRepository.findByChatId(chatId).get().getUser();
        int pageSize = 10;
        Pageable pageable = PageRequest.of(pageNumber, pageSize);
        Page<Course> coursesPage = moduleEnrollmentRepository.findEnrolledCoursesByUserId(user.getId(), pageable);

        if (!coursesPage.hasContent()) {
            String noCoursesText = messageService.getMessage(BotMessage.STUDENT_MY_COURSES_NO_COURSES);
            onlineEducationBot.myExecute(sendMsg.sendMessage(chatId, noCoursesText));
            return;
        }

        String text = buildMyCoursesText(user.getId(), coursesPage);
        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.myCoursesListPage(coursesPage);
        SendMessage sendMessage = sendMsg.sendMessage(chatId, text, keyboard);
        onlineEducationBot.myExecute(sendMessage);
    }

    private void sendAllCoursesPage(Long chatId, int pageNumber) {
        telegramUserRepository.updateStateByChatId(chatId, UserState.STUDENT_VIEWING_ALL_COURSES);
        // TODO: Implement logic for showing all courses
        onlineEducationBot.myExecute(sendMsg.sendMessage(chatId, "'Barcha Kurslar' bo'limi ishlab chiqilmoqda."));
    }

    private void sendBalanceMenu(Long chatId) {
        telegramUserRepository.updateStateByChatId(chatId, UserState.STUDENT_MANAGING_BALANCE);
        // TODO: Implement logic for showing the balance menu
        onlineEducationBot.myExecute(sendMsg.sendMessage(chatId, "'Balans va To'lovlar' bo'limi ishlab chiqilmoqda."));
    }

    private void askForSupportMessage(Long chatId) {
        telegramUserRepository.updateStateByChatId(chatId, UserState.STUDENT_AWAITING_SUPPORT_MESSAGE);
        // TODO: Implement logic for asking for a support message
        onlineEducationBot.myExecute(sendMsg.sendMessage(chatId, "'Yordam' bo'limi ishlab chiqilmoqda."));
    }

    // sendWelcomeMessage metodi endi public bo'lishi kerak,
    // chunki uni Callback servisi ham chaqiradi.
    @Override
    public void sendWelcomeMessage(Long chatId, String username) {
        // ... avvalgi kod ...
    }

    // --- PRIVATE IMPLEMENTATION METHODS ---

    /**
     * Edits an existing message to show a specific page of the user's enrolled courses.
     * Used for pagination.
     *
     * @param chatId     The student's chat ID.
     * @param messageId  The ID of the message to be edited.
     * @param pageNumber The new page number to display.
     */
    @Override
    public void editMyCoursesPage(Long chatId, Integer messageId, int pageNumber) {
        // sendMyCoursesPage metodidagi logikani deyarli takrorlaydi,
        // faqat oxirida 'SendMessage' o'rniga 'EditMessageText' yottaradian.
        User user = telegramUserRepository.findByChatId(chatId).get().getUser();
//        int pageSize = 5;
//        Pageable pageable = PageRequest.of(pageNumber, pageSize);
//        Page<CourseWithProgressDTO> coursesPage = moduleEnrollmentRepository.findEnrolledCoursesWithProgress(user.getId(), pageable);

        int pageSize = 10;
        Pageable pageable = PageRequest.of(pageNumber, pageSize);
        Page<Course> coursesPage = moduleEnrollmentRepository.findEnrolledCoursesByUserId(user.getId(), pageable);

        if (!coursesPage.hasContent()) {
            // Bu holatda tahrirlash o'rniga "Kurslar yo'q" deb javob berish mumkin
            // yoki hech narsa qilmaslik.
            return;
        }

        String finalText = buildMyCoursesText(user.getId(), coursesPage); // Avval yaratgan yordamchi metodimiz
        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.myCoursesListPage(coursesPage);

        // Xabarni tahrirlash
        EditMessageText editMessage = sendMsg.editMessage(chatId, messageId, finalText, keyboard);
        onlineEducationBot.myExecute(editMessage);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void sendCourseModulesPage(Long chatId, Integer messageId, Long courseId) {
        User user = telegramUserRepository.findByChatId(chatId)
                .orElseThrow(() -> new RuntimeException("TelegramUser not found"))
                .getUser();

        // 1. Kurs mavjudligini va nomini tekshirish
        Course course = courseRepository.findById(courseId)
                .orElseThrow(() -> new RuntimeException("Course with id " + courseId + " not found"));

        // 2. Foydalanuvchining shu kursdagi barcha a'zoliklarini (modullarini) olish
        List<ModuleEnrollment> enrollments = moduleEnrollmentRepository.findEnrollmentsByUserAndCourse(user.getId(), courseId);

        if (enrollments.isEmpty()) {
            // Agar modul topilmasa, foydalanuvchiga bu haqida xabar beramiz
            String noModulesText = messageService.getMessage(BotMessage.STUDENT_COURSE_MODULES_NO_MODULES);
            InlineKeyboardMarkup backKeyboard = studentInlineKeyboardService.backToMyCourses(); // Orqaga tugmasi
            EditMessageText editMessage = sendMsg.editMessage(chatId, messageId, noModulesText, backKeyboard);
            onlineEducationBot.myExecute(editMessage);
            return;
        }

        // 3. Xabar matnini yig'ish
        String text = buildCourseModulesText(course.getTitle(), enrollments);

        // 4. Klaviatura yasash
        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.courseModulesPage(courseId, enrollments);

        // 5. Avvalgi xabarni tahrirlash
        EditMessageText editMessage = sendMsg.editMessage(chatId, messageId, text, keyboard);
        onlineEducationBot.myExecute(editMessage);
    }

    /**
     * Helper method to build the text for the course modules list.
     */
    private String buildCourseModulesText(String courseTitle, List<ModuleEnrollment> enrollments) {
        StringBuilder textBuilder = new StringBuilder();

        // Asosiy sarlavhani .yml dan olish
        textBuilder.append(messageService.getMessage(
                BotMessage.STUDENT_COURSE_MODULES_HEADER,
                courseTitle
        ));
        textBuilder.append("\n\n");

        // Har bir modul uchun ro'yxat elementini .yml dan olib formatlash
        for (int i = 0; i < enrollments.size(); i++) {
            ModuleEnrollment enrollment = enrollments.get(i);
            Module module = enrollment.getModule();
            int progress = (int) enrollment.getProgressPercentage();
            int moduleNumber = i + 1; // Yoki modulning o'zining orderIndex'i

            textBuilder.append(messageService.getMessage(
                    BotMessage.STUDENT_COURSE_MODULES_LIST_ITEM,
                    moduleNumber,
                    module.getTitle(),
                    progress,
                    createProgressBar(progress)
            ));
            textBuilder.append("\n");
        }
        return textBuilder.toString();
    }

    @Override
    @Transactional(readOnly = true)
    public void sendLessonListPage(Long chatId, Integer messageId, Long moduleId) {
        User user = telegramUserRepository.findByChatId(chatId).get().getUser();
        Module module = moduleRepository.findById(moduleId)
                .orElseThrow(() -> new RuntimeException("Module not found"));

        // --- ASOSIY MANTIQ SHU YERDA ---
        // 1. Foydalanuvchi bu modul uchun TO'LOV QILGANMI?
        boolean hasPaid = paymentRepository.existsByUserIdAndModuleIdAndStatus(
                user.getId(),
                moduleId,
                TransactionStatus.SUCCESS // Yoki sizdagi "muvaffaqiyatli" status
        );

        // 2. Modulga tegishli barcha darslarni olish
        List<Lesson> lessons = lessonRepository.findAllByModuleIdOrderByOrderIndexAsc(moduleId);

        // 3. Xabar matnini va klaviaturani foydalanuvchining to'lov holatiga qarab yasash
        String text = buildLessonListText(module, lessons, hasPaid);
        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.lessonListPage(module, lessons, hasPaid);

        // 4. Avvalgi xabarni tahrirlash
        EditMessageText editMessage = sendMsg.editMessage(chatId, messageId, text, keyboard);
        onlineEducationBot.myExecute(editMessage);
    }

    // --- Yordamchi Metodlar ---

    private void showLessonsForEnrolledUser(Long chatId, Integer messageId, Module module) {
        List<Lesson> lessons = lessonRepository.findAllByModuleIdOrderByOrderIndexAsc(module.getId());
        String text = buildLessonListText(module, lessons, true); // isEnrolled = true
        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.lessonListPage(module, lessons, true);
        onlineEducationBot.myExecute(sendMsg.editMessage(chatId, messageId, text, keyboard));
    }

    private void showLessonsForUnenrolledUser(Long chatId, Integer messageId, Module module) {
        List<Lesson> lessons = lessonRepository.findAllByModuleIdOrderByOrderIndexAsc(module.getId());
        String text = buildLessonListText(module, lessons, false); // isEnrolled = false
        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.lessonListPage(module, lessons, false);
        onlineEducationBot.myExecute(sendMsg.editMessage(chatId, messageId, text, keyboard));
    }

    private void showFullyPaidModuleMessage(Long chatId, Integer messageId, Module module) {
        String text = messageService.getMessage(BotMessage.STUDENT_LESSON_FULLY_PAID_MODULE, module.getTitle());

        // Bu yerda klaviatura faqat "Sotib olish" va "Orqaga" tugmalaridan iborat bo'ladi
        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.buyOnlyKeyboard(module); // Bu metodni yaratish kerak

        onlineEducationBot.myExecute(sendMsg.editMessage(chatId, messageId, text, keyboard));
    }

    private String buildLessonListText(Module module, List<Lesson> lessons, boolean isEnrolled) {
        StringBuilder textBuilder = new StringBuilder();
        textBuilder.append(String.format("📖 <b>Modul: %s</b>\n", module.getTitle()));

        if (!isEnrolled) {
            textBuilder.append(String.format("_Ushbu modul pullik. Narxi: <b>%d UZS</b>_\n", module.getPrice()));
        }
        textBuilder.append("_Ko'rish uchun darsni tanlang:_\n\n");

        for (Lesson lesson : lessons) {
            String statusIcon = lesson.isFree() ? "🆓" : (isEnrolled ? "✅" : "🔒");
            textBuilder.append(String.format("%d. %s (%s)\n",
                    lesson.getOrderIndex(),
                    lesson.getTitle(),
                    statusIcon
            ));
        }
        return textBuilder.toString();
    }

//    @Override
//    @Transactional(readOnly = true)
//    public void sendLessonContent(Long chatId, Integer messageId, Long lessonId) {
//        // Step 1: Fetch the lesson and its module
//        Lesson lesson = lessonRepository.findById(lessonId)
//                .orElseThrow(() -> new RuntimeException("Lesson not found"));
//        Module module = lesson.getModule();
//
//        // Step 2: Delete the previous menu message to keep the chat clean
//        onlineEducationBot.myExecute(sendMsg.deleteMessage(chatId, messageId));
//
//        // Step 3: Find and send all AttachmentContent (videos, images, files)
//        List<Content> contents = lesson.getContents(); // Assuming lazy loading works due to @Transactional
//        for (Content content : contents) {
//            if (content instanceof AttachmentContent attachmentContent) {
//                // Assuming you have a file_id stored from a previous upload
//                String fileId = attachmentContent.getAttachment().getBucketName();
//                SendVideo sendVideo = new SendVideo(chatId.toString(), new InputFile(fileId));
//                sendVideo.setCaption(lesson.getTitle()); // Add lesson title as a caption

    /// /                onlineEducationBot.myExecute(sendVideo);
//            }
//        }
//
//        // Step 4: Prepare and send the text content message
//        String textContent = buildLessonTextContent(lesson, contents);
//        String lessonUrlOnSite = "http://your-site.com/courses/" + module.getCourse().getId() + "/modules/" + module.getId() + "/lessons/" + lesson.getId();
//        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.lessonViewKeyboard(module.getId(), lessonUrlOnSite);
//
//        SendMessage textMessage = sendMsg.sendMessage(chatId, textContent, keyboard);
//        onlineEducationBot.myExecute(textMessage);
//    }
    @Override
    @Transactional(readOnly = true) // Lazy-loading uchun
    public void sendLessonMainMenu(Long chatId, Integer messageId, Long lessonId) {
        Lesson lesson = lessonRepository.findById(lessonId)
                .orElseThrow(() -> new RuntimeException("Lesson not found"));

        String text = messageService.getMessage(
                BotMessage.STUDENT_LESSON_MAIN_MENU,
                lesson.getTitle(),
                lesson.getContent() // Lesson'dagi qisqacha tavsif
        );

        InlineKeyboardMarkup keyboard = studentInlineKeyboardService.lessonContentMenu(lesson);

        EditMessageText editMessage = sendMsg.editMessage(chatId, messageId, text, keyboard);
        onlineEducationBot.myExecute(editMessage);
    }

    @Override
    @Transactional(readOnly = true)
    public void sendContent(Long chatId, Long contentId) {
        Content content = contentRepository.findById(contentId)
                .orElseThrow(() -> new RuntimeException("Content not found"));

        if (content instanceof AttachmentContent attachmentContent) {
            String fileId = attachmentContent.getAttachment().getBucketName();
            SendVideo sendVideo = new SendVideo(chatId.toString(), new InputFile(fileId));
            // Videoga izoh qo'shish ixtiyoriy
            sendVideo.setCaption(content.getLesson().getTitle());
//            onlineEducationBot.myExecute(sendVideo);

        } else if (content instanceof TextContent textContent) {
            // TODO: Telegramning 4096 belgilik limitini hisobga olib, matnni
            // qismlarga bo'lib yuboradigan logikani qo'shish kerak.
            onlineEducationBot.myExecute(sendMsg.sendMessage(chatId, textContent.getText()));

        } else if (content instanceof QuizContent quizContent) {
            String text = messageService.getMessage(BotMessage.STUDENT_LESSON_QUIZ_TEXT);
            InlineKeyboardMarkup keyboard = studentInlineKeyboardService.quizButton(quizContent.getId());
            onlineEducationBot.myExecute(sendMsg.sendMessage(chatId, text, keyboard));
        }
    }

    private String buildLessonTextContent(Lesson lesson, List<Content> contents) {
        StringBuilder textBuilder = new StringBuilder();
        // Add the header from the .yml file
        textBuilder.append(messageService.getMessage(BotMessage.STUDENT_LESSON_CONTENT_HEADER, lesson.getTitle()));

        // Append all TextContent blocks
        for (Content content : contents) {
            if (content instanceof TextContent textContentBlock) {
                textBuilder.append(textContentBlock.getText());
                textBuilder.append("\n\n");
            }
        }
        return textBuilder.toString();
    }

    // --- PRIVATE HELPER METHODS ---


    private String buildMyCoursesText(Long userId, Page<Course> coursesPage) {
        StringBuilder textBuilder = new StringBuilder();
        textBuilder.append(String.format(
                messageService.getMessage(BotMessage.STUDENT_MY_COURSES_HEADER),
                coursesPage.getNumber() + 1,
                coursesPage.getTotalPages()
        )).append("\n\n");

        List<Course> courses = coursesPage.getContent();
        for (int i = 0; i < courses.size(); i++) {
            Course course = courses.get(i);
            int courseNumber = coursesPage.getNumber() * coursesPage.getSize() + i + 1;
            int progress = calculateCourseProgress(userId, course.getId());
            String progressBar = createProgressBar(progress);
            textBuilder.append(String.format(
                    messageService.getMessage(BotMessage.STUDENT_MY_COURSES_LIST_ITEM),
                    courseNumber, course.getTitle(), progress, progressBar
            )).append("\n");
        }
        return textBuilder.toString();
    }

    private int calculateCourseProgress(Long userId, Long courseId) {
        Double averageProgress = moduleEnrollmentRepository.findAverageProgressForCourse(userId, courseId);
        return (averageProgress != null) ? averageProgress.intValue() : 0;
    }

    private String prepareStudentDashboardText(User user, UserProfile profile) {
        Integer activeCoursesCount = moduleEnrollmentRepository.countActiveCoursesByUserId(user.getId());
        Double averageProgressDouble = moduleEnrollmentRepository.findAverageProgressByUserId(user.getId());
        int averageProgress = (averageProgressDouble != null) ? averageProgressDouble.intValue() : 0;
        Integer completedModulesCount = moduleEnrollmentRepository.countCompletedModulesByUserId(user.getId());
        String progressBar = createProgressBar(averageProgress);

        return messageService.getMessage(
                BotMessage.DASHBOARD_STUDENT,
                profile.getFirstName() + " " + profile.getLastName(),
                profile.getEmail(), user.getUsername(), user.getRole().name(),
                activeCoursesCount, averageProgress, progressBar, completedModulesCount
        );
    }

    private String createProgressBar(int percentage) {
        if (percentage < 0) percentage = 0;
        if (percentage > 100) percentage = 100;
        int filledBlocks = Math.round(percentage / 10.0f);
        int emptyBlocks = 10 - filledBlocks;
        return "█".repeat(filledBlocks) + "░".repeat(emptyBlocks);
    }

    private TelegramUser getOrCreateTelegramUser(Long chatId) {
        return telegramUserRepository.findByChatId(chatId).orElseGet(() -> {
            log.info("Creating a new TelegramUser for chatId: {}", chatId);
            TelegramUser newTelegramUser = new TelegramUser();
            newTelegramUser.setChatId(chatId);
            newTelegramUser.setUserState(UserState.UNREGISTERED);
            return telegramUserRepository.save(newTelegramUser);
        });
    }
}
----
package uz.pdp.online_education.telegram.service.student;

import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import uz.pdp.online_education.telegram.Utils;
import uz.pdp.online_education.telegram.service.student.template.StudentReplyKeyboardService;

import java.util.ArrayList;
import java.util.List;

@Service
public class StudentReplyKeyboardServiceImpl implements StudentReplyKeyboardService {

    /**
     * Creates a base {@link ReplyKeyboardMarkup} with common settings.
     * @return A pre-configured ReplyKeyboardMarkup object.
     */
    private ReplyKeyboardMarkup createBaseReplyKeyboard() {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setSelective(true);
        replyKeyboardMarkup.setOneTimeKeyboard(true);
        return replyKeyboardMarkup;
    }


    /**
     * {@inheritDoc}
     * Creates the main menu keyboard for the Student.
     * The layout is a 2x2 grid with the most common actions.
     */
    @Override
    public ReplyKeyboardMarkup studentMainMenu() {
        // Step 1: Create a base keyboard with standard settings.
        ReplyKeyboardMarkup replyKeyboardMarkup = createBaseReplyKeyboard();

        // Step 2: Initialize the list that will hold all rows of buttons.
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // Step 3: Create the first row of buttons.
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton(Utils.ReplyButtons.STUDENT_MY_COURSES));
        row1.add(new KeyboardButton(Utils.ReplyButtons.STUDENT_ALL_COURSES));

        // Step 4: Create the second row of buttons.
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton(Utils.ReplyButtons.STUDENT_BALANCE));
        row2.add(new KeyboardButton(Utils.ReplyButtons.STUDENT_HELP));

        // Step 5: Add all rows to the keyboard list.
        keyboardRows.add(row1);
        keyboardRows.add(row2);

        // Step 6: Set the completed list of rows to the keyboard object.
        replyKeyboardMarkup.setKeyboard(keyboardRows);

        // Step 7: Return the fully constructed keyboard.
        return replyKeyboardMarkup;
    }
}


kodni logicasi ozgartirilishi kerak mycourse reply btn bosilganda db moduleenrolmentdadan obuna bolgan modullarning courselarni olib kelish kerak takrorlamasdan